/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.usuario;

import controller.administrador.GestionCategorias;
import controller.baseDeDatos.CopiaDeSeguridad;
import controller.controlPartida.ConsultasPartida;
import controller.tools.*;
import controller.usuario.Codigos;
import controller.usuario.ConfiguracionUsuario;
import model.Partida;
import model.Pregunta;
import view.acceso.VentanaLogin;
import view.administrador.VentanaAdministrarCategorias;
import view.administrador.VentanaAdministrarCuestionarios;
import view.administrador.VentanaAdministrarPreguntas;
import view.juego.VentanaSeleccionarModoJuego;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.time.LocalDate;
import java.util.ArrayList;

/**
 * Esta clase permite pintar la iterfaz que permite al usuario ver un
 * historial de sus partidas jugadas junto con la informacion de la partida
 * y las preguntas respondidas en ellas
 * @author fernando
 */
@SuppressWarnings("all")
public class VentanaMisPartidas extends javax.swing.JFrame {
    DefaultTableModel modelo;
    /**
     * Creates new form VentanaMisPartidas
     */
    public VentanaMisPartidas() {
        initComponents();
        modelo = (DefaultTableModel) tablaPreguntas.getModel();
        cargarLista();
        setTitle("Mis partidas");
        setLocationRelativeTo(null);
        setResizable(false);
        jLabel1.setBorder(BorderFactory.createEmptyBorder(0,15,0,0));
        jLabel2.setBorder(BorderFactory.createEmptyBorder(0,15,0,0));
    }

    /**
     * Este metodo permite cargar las partidas jugadas por el usuario en la lista desplegable
     * @author Fernando
     */
    private void cargarLista() {
        ArrayList<Partida> partidas = ConsultasPartida.obtenerPartidasUsuario(ConfiguracionUsuario.getNombreUsuario());
        for(Partida p: partidas){
            listaPartidas.addItem(p);
        }
        listaPartidas.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelSuperior = new javax.swing.JPanel();
        listaPartidas = new javax.swing.JComboBox<>(new PilaComboBoxModel<>());
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtEnunciado = new javax.swing.JTextField();
        txtRespuestaCorrecta = new javax.swing.JTextField();
        txtRespuestaIncorrecta3 = new javax.swing.JTextField();
        txtRespuestaIncorrecta1 = new javax.swing.JTextField();
        txtRespuestaIncorrecta2 = new javax.swing.JTextField();
        txtCategoria = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        opcionMisPartidas = new javax.swing.JMenuItem();
        txtModo = new javax.swing.JTextField();
        txtPuntuacion = new javax.swing.JTextField();
        datePicker = new com.github.lgooddatepicker.components.DatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPreguntas = new javax.swing.JTable();
        barraMenu = new javax.swing.JMenuBar();
        menuUsuario = new javax.swing.JMenu();
        opcionModoJuego = new javax.swing.JMenuItem();
        opcionAjustesUsuario = new javax.swing.JMenuItem();
        opcionCerrarSesion = new javax.swing.JMenuItem();
        opcionUsuarios = new javax.swing.JMenuItem();
        menuAdministrador = new javax.swing.JMenu();
        opcionPreguntas = new javax.swing.JMenuItem();
        opcionCuestionarios = new javax.swing.JMenuItem();
        opcionCategorias = new javax.swing.JMenuItem();
        opcionImportar = new javax.swing.JMenuItem();
        opcionExportar = new javax.swing.JMenuItem();
        opcionCopiasDeSeguridad = new javax.swing.JMenu();
        menuLicencia = new javax.swing.JMenu();
        opcionLicencia = new javax.swing.JMenuItem();



        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 700));

        panelPrincipal.setLayout(new java.awt.BorderLayout());

        listaPartidas.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        listaPartidas.setMinimumSize(new java.awt.Dimension(200, 22));
        listaPartidas.setPreferredSize(new java.awt.Dimension(1000, 50));
        listaPartidas.setForeground(Colores.COLOR_LISTAS);
        listaPartidas.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                listaPartidasItemListener(evt);
            }
        });
        panelSuperior.add(listaPartidas);

        panelPrincipal.add(panelSuperior, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Informacion de la pregunta"));
        jPanel1.setPreferredSize(new java.awt.Dimension(1299, 250));

        jLabel1.setText("Enunciado");
        jLabel1.setForeground(Colores.COLOR_BLANCO);

        jLabel2.setText("Respuesta Correcta");
        jLabel2.setForeground(Colores.COLOR_BLANCO);

        jLabel3.setText("Respuesta Incorrecta 1");
        jLabel3.setForeground(Colores.COLOR_BLANCO);

        jLabel4.setText("Respuesta Incorrecta 2");
        jLabel4.setForeground(Colores.COLOR_BLANCO);

        jLabel5.setText("Respuesta Incorrecta 3");
        jLabel5.setForeground(Colores.COLOR_BLANCO);

        jLabel6.setText("Categoria");
        jLabel6.setForeground(Colores.COLOR_BLANCO);

        jLabel7.setText("Modo");
        jLabel7.setForeground(Colores.COLOR_BLANCO);

        jLabel8.setText("Fecha");
        jLabel8.setForeground(Colores.COLOR_BLANCO);

        jLabel9.setText("Puntuacion");
        jLabel9.setForeground(Colores.COLOR_BLANCO);

        txtModo.setText("");
        txtModo.setForeground(Colores.COLOR_BLANCO);
        txtModo.setEditable(false);

        txtPuntuacion.setText("");
        txtPuntuacion.setEditable(false);

        txtEnunciado.setEditable(false);
        txtEnunciado.setForeground(Colores.COLOR_BLANCO);
        txtEnunciado.setDisabledTextColor(Colores.COLOR_BLANCO);

        txtRespuestaCorrecta.setEditable(false);
        txtRespuestaCorrecta.setDisabledTextColor(Colores.COLOR_BLANCO);
        txtRespuestaCorrecta.setForeground(Colores.COLOR_BLANCO);

        txtRespuestaIncorrecta1.setEditable(false);
        txtRespuestaIncorrecta1.setDisabledTextColor(Colores.COLOR_BLANCO);
        txtRespuestaIncorrecta1.setForeground(Colores.COLOR_BLANCO);

        txtRespuestaIncorrecta2.setEditable(false);
        txtRespuestaIncorrecta2.setDisabledTextColor(Colores.COLOR_BLANCO);
        txtRespuestaIncorrecta2.setForeground(Colores.COLOR_BLANCO);

        txtRespuestaIncorrecta3.setEditable(false);
        txtRespuestaIncorrecta3.setDisabledTextColor(Colores.COLOR_BLANCO);
        txtRespuestaIncorrecta3.setForeground(Colores.COLOR_BLANCO);

        txtCategoria.setEditable(false);
        txtCategoria.setDisabledTextColor(Colores.COLOR_BLANCO);
        txtCategoria.setForeground(Colores.COLOR_BLANCO);


        datePicker.setEnabled(false);
        datePicker.setForeground(Colores.COLOR_NEGRO);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEnunciado, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                    .addComponent(txtRespuestaCorrecta)
                    .addComponent(txtRespuestaIncorrecta1)
                    .addComponent(txtRespuestaIncorrecta3)
                    .addComponent(txtCategoria)
                    .addComponent(txtRespuestaIncorrecta2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtModo, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(txtPuntuacion, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(datePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtEnunciado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtModo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtRespuestaCorrecta, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRespuestaIncorrecta1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtPuntuacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRespuestaIncorrecta2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtRespuestaIncorrecta3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        panelPrincipal.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        tablaPreguntas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enunciado", "Respuesta Correcta", "Respuesta Incorrecta 1", "Respuesta Incorrecta 2", "Respuesta Incorrecta 3", "Categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPreguntas.setForeground(Colores.COLOR_NEGRO
        );
        tablaPreguntas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                super.mouseClicked(evt);
                tablaPreguntasMouseClicked(evt);
            }
        });
        tablaPreguntas.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent evt) {
                super.keyReleased(evt);
                tablaPreguntasKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPreguntas);

        panelPrincipal.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        menuUsuario.setText("Usuario");

        opcionModoJuego.setText("Seleccionar Modo de juego");
        opcionModoJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionModoJuegoActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionModoJuego);

        opcionCerrarSesion.setText("Cerrar Sesion");
        opcionModoJuego.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.ALT_MASK));
        opcionCerrarSesion.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.ALT_MASK));
        opcionCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCerrarSesionActionPerformed(evt);
            }
        });
        opcionAjustesUsuario.setText("Ajustes de usuario");
        opcionAjustesUsuario.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, ActionEvent.ALT_MASK));

        opcionAjustesUsuario.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionAjustesUsuarioActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionAjustesUsuario);
        menuUsuario.add(opcionCerrarSesion);

        opcionMisPartidas.setText("Mis partidas");
        opcionMisPartidas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, ActionEvent.ALT_MASK));
        opcionMisPartidas.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionMisPartidasActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionMisPartidas);

        barraMenu.add(menuUsuario);

        menuAdministrador.setText("Administrador");

        opcionPreguntas.setText("Preguntas");
        opcionPreguntas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.ALT_MASK));

        opcionPreguntas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionPreguntasActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionPreguntas);

        opcionCuestionarios.setText("Cuestionarios");
        opcionCuestionarios.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.ALT_MASK));
        opcionCuestionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCuestionariosActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionCuestionarios);

        opcionCategorias.setText("Categorias");
        opcionCategorias.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.ALT_MASK));
        opcionCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCategoriasActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionCategorias);
        opcionUsuarios.setText("Usuarios");
        opcionUsuarios.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U, ActionEvent.ALT_MASK));
        opcionUsuarios.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionUsuariosActionPerformed(evt);
            }
        });
        opcionCopiasDeSeguridad.setText("Copias de seguridad");
        opcionImportar.setText("Importar");
        opcionImportar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.ALT_MASK));
        opcionImportar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionImportarActionPerformed(evt);
            }
        });
        opcionExportar.setText("Exportar");
        opcionExportar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, ActionEvent.ALT_MASK));
        opcionExportar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionExportarActionPeformed(evt);
            }
        });
        opcionCopiasDeSeguridad.add(opcionImportar);
        opcionCopiasDeSeguridad.add(opcionExportar);
        menuAdministrador.add(opcionCopiasDeSeguridad);
        menuAdministrador.add(opcionUsuarios);


        barraMenu.add(menuAdministrador);
        menuLicencia.setText("Licencia");
        opcionLicencia.setText("Detalles de la licencia");
        opcionLicencia.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.ALT_MASK));
        opcionLicencia.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionLicenciaActionPerformed(evt);
            }
        });
        menuLicencia.add(opcionLicencia);
        barraMenu.add(menuLicencia);


        setJMenuBar(barraMenu);


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opcionLicenciaActionPerformed(ActionEvent evt) {
        if(!Browser.openURL(Browser.URL_LICENCIA)){
            JOptionPane.showMessageDialog(null, Mensajes.ERROR_ABRIR_NAVEGADOR);
            Browser.copyURL(Browser.URL_LICENCIA);
        }
    }

    private void opcionExportarActionPeformed(ActionEvent evt) {
        if(JOptionPane.showConfirmDialog(null, Mensajes.CONFIRMACION_BACKUP, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0){
            return;
        }
        if(CopiaDeSeguridad.crearCopia()){
            JOptionPane.showMessageDialog(this,Mensajes.BACKUP_CORRECTO,Mensajes.CORRECTO,JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_BACKUP,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
        }
    }

    private void opcionImportarActionPerformed(ActionEvent evt) {
        int estado = CopiaDeSeguridad.restaurarCopia();
        if(estado == Codigos.CORRECTO){
            JOptionPane.showMessageDialog(this,Mensajes.IMPORTACION_CORRECTA,Mensajes.CORRECTO,JOptionPane.INFORMATION_MESSAGE);
        }else if(estado == Codigos.ERROR){
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_IMPORTACION,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
        }
    }

    private void opcionUsuariosActionPerformed(ActionEvent evt) {
        VentanaMisPartidas frame = new VentanaMisPartidas();
        frame.setVisible(true);
        dispose();

    }

    private void opcionAjustesUsuarioActionPerformed(ActionEvent evt) {
        VentanaAjustesUsuario frame = new VentanaAjustesUsuario();
        frame.setVisible(true);
        dispose();
    }

    private void opcionMisPartidasActionPerformed(ActionEvent evt) {
        VentanaMisPartidas frame = new VentanaMisPartidas();
        frame.setVisible(true);
        dispose();
    }

    private void tablaPreguntasKeyReleased(KeyEvent evt) {
        colocarDatosPregunta();
    }

    private void tablaPreguntasMouseClicked(MouseEvent evt) {
        colocarDatosPregunta();
    }

    private void listaPartidasItemListener(ItemEvent evt) {
        colocarDatosPartida();
        colocarPreguntas();
    }

    /**
     * Este metodo permite colocar las preguntas de una partida
     * en la tabla
     * @author Fernando
     */
    private void colocarPreguntas() {
        vaciarModelo();
        if(listaPartidas.getSelectedItem() == null){
            return;
        }
        ArrayList<Pregunta> preguntas = ((Partida) listaPartidas.getSelectedItem()).getPreguntas();
        for (Pregunta p: preguntas){
            modelo.addRow(new String[]{
                    p.getEnunciado(),
                    p.getRespuestaCorrecta(),
                    p.getRespuestaIncorrecta1(),
                    p.getRespuestaIncorrecta2(),
                    p.getRespuestaIncorrecta3(),
                    GestionCategorias.obtenerCategoriaPregunta(p.getEnunciado())
            });
        }
        tintarTabla();
    }

    /**
     * Este metodo permite vaciar las preguntas de la tabla
     * @author Fernando
     */
    private void vaciarModelo() {
        int numero = modelo.getRowCount();
        for (int i = 0; i < numero; i++) {
            modelo.removeRow(0);
        }
    }

    /**
     * Este metodo permite colocar las preguntas de la tabla en color verde
     * si estas fueron acertadas en la partida, y de color rojo si no
     * @author Fernando
     */
    private void tintarTabla() {
        int numero = tablaPreguntas.getColumnCount();
        Partida partida = (Partida) listaPartidas.getSelectedItem();
        for (int i = 0; i < numero; i++) {
            tablaPreguntas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderResultado(partida.getId()));
        }
    }

    /**
     * Este metodo permite colocar los datos de una pregunta en
     * su casilla correspondiente
     * @author Fernando
     */
    private void colocarDatosPregunta(){
        int posicion = tablaPreguntas.getSelectedRow();
        if (posicion == -1) {
            return;
        }
        txtEnunciado.setText((String) modelo.getValueAt(posicion,0));
        txtRespuestaCorrecta.setText((String) modelo.getValueAt(posicion,1));
        txtRespuestaIncorrecta1.setText((String) modelo.getValueAt(posicion,2));
        txtRespuestaIncorrecta2.setText((String) modelo.getValueAt(posicion,3));
        txtRespuestaIncorrecta3.setText((String) modelo.getValueAt(posicion,4));
        txtCategoria.setText((String) modelo.getValueAt(posicion,5));
    }

    /**
     * Este metodo permite colocar los datos de una partida en
     * sus cajas de texto correspondiente
     */
    private void colocarDatosPartida() {
        Partida partida = (Partida) listaPartidas.getSelectedItem();
        txtModo.setText(partida.getTipo());
        datePicker.setDate(LocalDate.parse(partida.getFecha()));
        txtPuntuacion.setText(String.valueOf(partida.getPuntuacion()));
    }

    private void opcionModoJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionModoJuegoActionPerformed
        VentanaSeleccionarModoJuego ventana = new VentanaSeleccionarModoJuego();
        ventana.setVisible(true);
        dispose();
    }//GEN-LAST:event_opcionModoJuegoActionPerformed

    private void opcionCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCerrarSesionActionPerformed
        VentanaLogin frame = new VentanaLogin();
        frame.setVisible(true);
        dispose();
    }//GEN-LAST:event_opcionCerrarSesionActionPerformed

    private void opcionPreguntasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionPreguntasActionPerformed
        VentanaAdministrarPreguntas ventana = new VentanaAdministrarPreguntas();
        ventana.setVisible(true);
        dispose();
    }//GEN-LAST:event_opcionPreguntasActionPerformed

    private void opcionCuestionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCuestionariosActionPerformed
        VentanaAdministrarCuestionarios ventana =  new VentanaAdministrarCuestionarios();
        ventana.setVisible(true);
        dispose();
    }//GEN-LAST:event_opcionCuestionariosActionPerformed

    private void opcionCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCategoriasActionPerformed
        VentanaAdministrarCategorias ventana =  new VentanaAdministrarCategorias();
        ventana.setVisible(true);
        dispose();
    }//GEN-LAST:event_opcionCategoriasActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private com.github.lgooddatepicker.components.DatePicker datePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem opcionMisPartidas;

    private javax.swing.JTable tablaPreguntas;
    private javax.swing.JTextField txtModo;
    private javax.swing.JTextField txtPuntuacion;
    private javax.swing.JComboBox<Partida> listaPartidas;
    private javax.swing.JMenu menuAdministrador;
    private javax.swing.JMenu menuUsuario;
    private javax.swing.JMenuItem opcionCategorias;
    private javax.swing.JMenu opcionCopiasDeSeguridad;
    private javax.swing.JMenuItem opcionExportar;
    private javax.swing.JMenuItem opcionImportar;
    private javax.swing.JMenuItem opcionAjustesUsuario;
    private javax.swing.JMenuItem opcionCerrarSesion;
    private javax.swing.JMenuItem opcionCuestionarios;
    private javax.swing.JMenuItem opcionModoJuego;
    private javax.swing.JMenuItem opcionPreguntas;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtEnunciado;
    private javax.swing.JTextField txtRespuestaCorrecta;
    private javax.swing.JTextField txtRespuestaIncorrecta1;
    private javax.swing.JMenuItem opcionUsuarios;
    private javax.swing.JTextField txtRespuestaIncorrecta2;
    private javax.swing.JTextField txtRespuestaIncorrecta3;
    private javax.swing.JMenu menuLicencia;
    private javax.swing.JMenuItem opcionLicencia;

    // End of variables declaration//GEN-END:variables
}
