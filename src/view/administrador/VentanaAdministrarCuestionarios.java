/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.administrador;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import controller.administrador.GestionCategorias;
import controller.administrador.GestionCuestionarios;
import controller.administrador.GestionPreguntas;
import controller.baseDeDatos.CopiaDeSeguridad;
import controller.tools.*;
import controller.usuario.Codigos;
import model.Cuestionario;
import view.acceso.VentanaLogin;
import view.juego.VentanaSeleccionarModoJuego;
import view.usuario.VentanaAjustesUsuario;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase permite al usuario gestionar los cuestionarios, sus funciones son:
 * <ul>
 *     <li>Insertar cuestionarios</li>
 *     <li>Borrar cuestionarios</li>
 *     <li>Modificar cuestionarios</li>
 *     <li>Ver los datos de los cuestionarios</li>
 *     <li>Insertar preguntas a un cuestionario</li>
 *     <li>Borrar preguntas de un cuestionario</li>
 *     <li>Ver las preguntas de los cuestionarios</li>
 * </ul>
 * <hr>
 *
 * @author fernando
 */
public class VentanaAdministrarCuestionarios extends javax.swing.JFrame {
    private static final Logger logger = LoggerUtil.getLogger(VentanaAdministrarCuestionarios.class);
    DefaultTableModel modelo;

    /**
     * Creates new form VentanaAdministrarCuestionarios
     */
    public VentanaAdministrarCuestionarios() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        dialogoPreguntas2 = new javax.swing.JDialog();
        panelPrincipal3 = new javax.swing.JPanel();
        panelDialogoFila5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        panelDialogoFila6 = new javax.swing.JPanel();
        listaPreguntasDialogo = new javax.swing.JComboBox<>();
        listaCategoriasDialogo = new javax.swing.JComboBox<>();
        panelDialogoFila7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        inputRespuestaCorrecta = new javax.swing.JTextField();
        inputRespuestaIncorrecta1 = new javax.swing.JTextField();
        inputRespuestaIncorrecta2 = new javax.swing.JTextField();
        inputRespuestaIncorrecta3 = new javax.swing.JTextField();
        panelDialogoFila8 = new javax.swing.JPanel();
        btnInsertar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        panelPrincipal = new javax.swing.JPanel();
        panelFila1 = new javax.swing.JPanel();
        listaCuestionarios = new javax.swing.JComboBox<>();
        listaCategorias = new javax.swing.JComboBox<>();
        panelFila2 = new javax.swing.JPanel();
        panelBotones = new javax.swing.JPanel();
        btnCrear = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnBorrarPregunta = new javax.swing.JButton();
        btnInsertarPregunta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPreguntas = new javax.swing.JTable();
        jpanelTextos = new javax.swing.JPanel();
        JpanelPreguntas = new javax.swing.JPanel();
        txtCategoriaPregunta = new javax.swing.JTextField();
        txtRespuestaIncorrecta2 = new javax.swing.JTextField();
        txtRespuestaIncorrecta1 = new javax.swing.JTextField();
        txtRespuestaCorrecta = new javax.swing.JTextField();
        txtEnunciado = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtRespuestaIncorrecta3 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtNombreCuestionario = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtDescripcionCuestionario = new javax.swing.JTextField();
        barraMenu = new javax.swing.JMenuBar();
        menuUsuario = new javax.swing.JMenu();
        opcionModoJuego = new javax.swing.JMenuItem();
        menuAdministrador = new javax.swing.JMenu();
        opcionPreguntas = new javax.swing.JMenuItem();
        opcionCerrarSesion = new javax.swing.JMenuItem();
        opcionAjustesUsuario = new javax.swing.JMenuItem();
        opcionCuestionarios = new javax.swing.JMenuItem();
        opcionCategorias = new javax.swing.JMenuItem();
        opcionCopiasDeSeguridad = new javax.swing.JMenu();
        opcionImportar = new javax.swing.JMenuItem();
        opcionExportar = new javax.swing.JMenuItem();
        opcionUsuarios = new javax.swing.JMenuItem();


        panelPrincipal3.setLayout(new java.awt.GridLayout(4, 1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Preguntas");
        panelDialogoFila5.add(jLabel3);

        panelPrincipal3.add(panelDialogoFila5);

        panelDialogoFila6.setPreferredSize(new java.awt.Dimension(1000, 50));


        listaPreguntasDialogo.setEditable(false);
        listaPreguntasDialogo.setForeground(new Color(255, 255, 255));
        listaPreguntasDialogo.setMaximumRowCount(50);
        listaPreguntasDialogo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        listaPreguntasDialogo.setPreferredSize(new java.awt.Dimension(600, 40));

        listaPreguntasDialogo.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                listaPreguntasDialogoItemListener(evt);
            }
        });
        panelDialogoFila6.add(listaPreguntasDialogo);

        listaCategoriasDialogo.setForeground(new Color(255, 255, 255));
        listaCategoriasDialogo.setPreferredSize(new java.awt.Dimension(200, 40));

        listaCategoriasDialogo.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                listaCategoriasDialogoItemListener(evt);
            }
        });

        listaCategorias.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                listaCategoriasItemListener(evt);
            }
        });
        panelDialogoFila6.add(listaCategoriasDialogo);

        panelPrincipal3.add(panelDialogoFila6);

        panelDialogoFila7.setLayout(new java.awt.GridLayout(2, 4));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Respuesta Correcta");
        panelDialogoFila7.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Respuesta Incorrecta 1");
        panelDialogoFila7.add(jLabel5);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Respuesta Incorrecta 2 ");
        panelDialogoFila7.add(jLabel14);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Respuesta Incorrecta 3");
        panelDialogoFila7.add(jLabel15);

        inputRespuestaCorrecta.setColumns(20);
        inputRespuestaCorrecta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputRespuestaCorrecta.setForeground(new Color(255, 255, 255));
        inputRespuestaCorrecta.setBackground(new Color(50, 255, 126, 100));
        inputRespuestaCorrecta.setHorizontalAlignment(SwingConstants.HORIZONTAL);
        panelDialogoFila7.add(inputRespuestaCorrecta);

        inputRespuestaIncorrecta1.setColumns(20);
        inputRespuestaIncorrecta1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputRespuestaIncorrecta1.setForeground(new Color(255, 255, 255));
        inputRespuestaIncorrecta1.setBackground(new Color(255, 56, 56, 100));
        inputRespuestaIncorrecta1.setHorizontalAlignment(SwingConstants.HORIZONTAL);
        panelDialogoFila7.add(inputRespuestaIncorrecta1);

        inputRespuestaIncorrecta2.setColumns(20);
        inputRespuestaIncorrecta2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputRespuestaIncorrecta2.setForeground(new Color(255, 255, 255));
        inputRespuestaIncorrecta2.setBackground(new Color(255, 56, 56, 100));
        inputRespuestaIncorrecta2.setHorizontalAlignment(SwingConstants.HORIZONTAL);
        panelDialogoFila7.add(inputRespuestaIncorrecta2);

        inputRespuestaIncorrecta3.setColumns(20);
        inputRespuestaIncorrecta3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputRespuestaIncorrecta3.setForeground(new Color(255, 255, 255));
        inputRespuestaIncorrecta3.setBackground(new Color(255, 56, 56, 100));
        inputRespuestaIncorrecta3.setHorizontalAlignment(SwingConstants.HORIZONTAL);
        panelDialogoFila7.add(inputRespuestaIncorrecta3);

        panelPrincipal3.add(panelDialogoFila7);

        panelDialogoFila8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 30));

        btnInsertar.setBackground(Colores.COLOR_BOTON_ACEPTAR);
        btnInsertar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnInsertar.setForeground(new java.awt.Color(0, 0, 0));
        btnInsertar.setText("Insertar");
        btnInsertar.setBorder(null);
        btnInsertar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsertar.setPreferredSize(new java.awt.Dimension(200, 60));
        btnInsertar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });
        panelDialogoFila8.add(btnInsertar);

        btnBuscar.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(0, 0, 0));
        btnBuscar.setText("Buscar");
        btnBuscar.setBorder(null);
        btnBuscar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.setPreferredSize(new java.awt.Dimension(200, 60));
        //panelDialogoFila8.add(btnBuscar);

        btnSalir.setBackground(Colores.COLOR_BOTON_CANCELAR);
        btnSalir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(0, 0, 0));
        btnSalir.setText("Salir");
        btnSalir.setBorder(null);
        btnSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalir.setPreferredSize(new java.awt.Dimension(200, 60));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        panelDialogoFila8.add(btnSalir);

        panelPrincipal3.add(panelDialogoFila8);

        javax.swing.GroupLayout dialogoPreguntas2Layout = new javax.swing.GroupLayout(dialogoPreguntas2.getContentPane());
        dialogoPreguntas2.getContentPane().setLayout(dialogoPreguntas2Layout);
        dialogoPreguntas2Layout.setHorizontalGroup(
                dialogoPreguntas2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipal3, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        dialogoPreguntas2Layout.setVerticalGroup(
                dialogoPreguntas2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dialogoPreguntas2Layout.createSequentialGroup()
                                .addComponent(panelPrincipal3, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 700));

        panelPrincipal.setLayout(new java.awt.BorderLayout());

        panelFila1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 30));

        listaCuestionarios.setEditable(false);
        listaCuestionarios.setForeground(new java.awt.Color(0, 0, 0));
        listaCuestionarios.setMaximumRowCount(50);
        listaCuestionarios.setPreferredSize(new java.awt.Dimension(600, 40));
        listaCuestionarios.setEditable(false);
        listaCuestionarios.setForeground(new Color(0, 0, 0));
        listaCuestionarios.setMaximumRowCount(50);
        listaCuestionarios.setPreferredSize(new java.awt.Dimension(600, 40));
        listaCuestionarios.setFont(new java.awt.Font("Segoe UI", 1, 14));
        listaCuestionarios.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                listaCuestionariosItemListener(evt);
            }
        });
        panelFila1.add(listaCuestionarios);

        listaCategorias.setPreferredSize(new java.awt.Dimension(200, 40));
        listaCategorias.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                listaCategoriasItemListener(evt);
            }
        });
        listaCategorias.setPreferredSize(new java.awt.Dimension(200, 40));
        panelFila1.add(listaCategorias);

        panelPrincipal.add(panelFila1, java.awt.BorderLayout.PAGE_START);

        panelFila2.setLayout(new java.awt.BorderLayout());

        panelBotones.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));
        panelBotones.setPreferredSize(new java.awt.Dimension(200, 293));
        panelBotones.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 10));

        btnCrear.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnCrear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCrear.setForeground(new java.awt.Color(0, 0, 0));
        btnCrear.setText("Crear");
        btnCrear.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnCrear.setPreferredSize(new java.awt.Dimension(100, 40));
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        panelBotones.add(btnCrear);

        btnBorrar.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnBorrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(0, 0, 0));
        btnBorrar.setText("Borrar");
        btnBorrar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnBorrar.setPreferredSize(new java.awt.Dimension(100, 40));
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        panelBotones.add(btnBorrar);

        btnModificar.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnModificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(0, 0, 0));
        btnModificar.setText("Modificar");
        btnModificar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new java.awt.Dimension(100, 40));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        panelBotones.add(btnModificar);

        btnBorrarPregunta.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnBorrarPregunta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBorrarPregunta.setForeground(new java.awt.Color(0, 0, 0));
        btnBorrarPregunta.setText("Borrar Pregunta");
        btnBorrarPregunta.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnBorrarPregunta.setPreferredSize(new java.awt.Dimension(150, 40));
        btnBorrarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarPreguntaActionPerformed(evt);
            }
        });
        panelBotones.add(btnBorrarPregunta);

        btnInsertarPregunta.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnInsertarPregunta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnInsertarPregunta.setForeground(new Color(0, 0, 0));
        btnInsertarPregunta.setText("Añadir Pregunta");
        btnInsertarPregunta.setPreferredSize(new java.awt.Dimension(150, 40));
        btnInsertarPregunta.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnInsertarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarPreguntaActionPerformed(evt);
            }
        });
        panelBotones.add(btnInsertarPregunta);

        panelFila2.add(panelBotones, java.awt.BorderLayout.LINE_END);

        tablaPreguntas.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                },
                new String[]{
                        "Pregunta", "Respuesta Correcta", "Respuesta Incorrecta 1", "Respuesta Incorrecta 2", "Respuesta Incorrecta 3"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        JPopupMenu popup = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem(Mensajes.MENSAJE_BORRAR);
        deleteItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });


        popup.add(deleteItem);

        tablaPreguntas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPreguntasMouseClicked(evt);
            }

            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    popup.show(tablaPreguntas, e.getX(), e.getY());
                }
            }

            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    popup.show(tablaPreguntas, e.getX(), e.getY());
                }
            }
        });
        tablaPreguntas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                super.keyReleased(evt);
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPreguntas);

        panelFila2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelPrincipal.add(panelFila2, java.awt.BorderLayout.CENTER);

        jpanelTextos.setMaximumSize(new java.awt.Dimension(2147483647, 22));
        jpanelTextos.setPreferredSize(new java.awt.Dimension(861, 230));

        JpanelPreguntas.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la pregunta"));

        txtCategoriaPregunta.setMaximumSize(new java.awt.Dimension(2147483647, 22));
        txtCategoriaPregunta.setPreferredSize(new java.awt.Dimension(73, 22));

        txtRespuestaIncorrecta2.setMaximumSize(new java.awt.Dimension(2147483647, 22));
        txtRespuestaIncorrecta2.setPreferredSize(new java.awt.Dimension(73, 22));

        txtRespuestaIncorrecta1.setMaximumSize(new java.awt.Dimension(2147483647, 22));
        txtRespuestaIncorrecta1.setPreferredSize(new java.awt.Dimension(73, 22));

        txtRespuestaCorrecta.setMaximumSize(new java.awt.Dimension(2147483647, 22));

        txtEnunciado.setMaximumSize(new java.awt.Dimension(2147483647, 22));

        jLabel7.setText("Enunciado");

        jLabel8.setText("Respuesta Correcta");

        jLabel9.setText("Respuesta Incorrecta 1");

        jLabel10.setText("Respuesta Incorrecta 2");

        jLabel11.setText("Respuesta Incorrecta 3");

        jLabel13.setText("Categoria");

        txtNombreCuestionario.addFocusListener(new EventoFoco());
        txtDescripcionCuestionario.addFocusListener(new EventoFoco());

        txtRespuestaIncorrecta3.setMaximumSize(new java.awt.Dimension(2147483647, 22));
        txtRespuestaIncorrecta3.setPreferredSize(new java.awt.Dimension(73, 22));

        javax.swing.GroupLayout JpanelPreguntasLayout = new javax.swing.GroupLayout(JpanelPreguntas);
        JpanelPreguntas.setLayout(JpanelPreguntasLayout);
        JpanelPreguntasLayout.setHorizontalGroup(
                JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpanelPreguntasLayout.createSequentialGroup()
                                .addContainerGap(22, Short.MAX_VALUE)
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(JpanelPreguntasLayout.createSequentialGroup()
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtCategoriaPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(JpanelPreguntasLayout.createSequentialGroup()
                                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(txtRespuestaIncorrecta3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(JpanelPreguntasLayout.createSequentialGroup()
                                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(txtRespuestaIncorrecta2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(JpanelPreguntasLayout.createSequentialGroup()
                                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(23, 23, 23)
                                                        .addComponent(txtRespuestaCorrecta, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(JpanelPreguntasLayout.createSequentialGroup()
                                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(66, 66, 66)
                                                        .addComponent(txtEnunciado, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpanelPreguntasLayout.createSequentialGroup()
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtRespuestaIncorrecta1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        JpanelPreguntasLayout.setVerticalGroup(
                JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(JpanelPreguntasLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(txtEnunciado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(txtRespuestaCorrecta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtRespuestaIncorrecta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtRespuestaIncorrecta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtRespuestaIncorrecta3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addGroup(JpanelPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtCategoriaPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del cuestionario"));

        jLabel6.setText("Nombre");

        jLabel12.setText("Descripcion");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtNombreCuestionario)
                                                        .addComponent(txtDescripcionCuestionario)))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addGap(164, 164, 164)
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addGap(165, 165, 165)
                                                                .addComponent(jLabel12)))
                                                .addGap(0, 167, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombreCuestionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDescripcionCuestionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpanelTextosLayout = new javax.swing.GroupLayout(jpanelTextos);
        jpanelTextos.setLayout(jpanelTextosLayout);
        jpanelTextosLayout.setHorizontalGroup(
                jpanelTextosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jpanelTextosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(JpanelPreguntas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(280, Short.MAX_VALUE))
        );
        jpanelTextosLayout.setVerticalGroup(
                jpanelTextosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelTextosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jpanelTextosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(JpanelPreguntas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        panelPrincipal.add(jpanelTextos, java.awt.BorderLayout.PAGE_END);

        menuUsuario.setText("Usuario");

        opcionModoJuego.setText("Seleccionar Modo de juego");
        opcionModoJuego.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.ALT_MASK));
        opcionModoJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionModoJuegoActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionModoJuego);

        barraMenu.add(menuUsuario);

        menuAdministrador.setText("Administrador");

        opcionPreguntas.setText("Preguntas");
        opcionPreguntas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.ALT_MASK));
        opcionPreguntas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionPreguntasActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionPreguntas);
        opcionCerrarSesion.setText("Cerrar sesion");
        opcionCerrarSesion.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.ALT_MASK));
        opcionCerrarSesion.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionCerrarSesionActionListener(evt);
            }
        });
        menuUsuario.add(opcionCerrarSesion);
        opcionAjustesUsuario.setText("Ajustes de usuario");
        opcionAjustesUsuario.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, ActionEvent.ALT_MASK));
        opcionAjustesUsuario.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionAjustesUsuarioActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionAjustesUsuario);


        opcionCuestionarios.setText("Cuestionarios");
        opcionCuestionarios.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.ALT_MASK));
        opcionCuestionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCuestionariosActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionCuestionarios);

        opcionCategorias.setText("Categorias");
        opcionCategorias.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.ALT_MASK));
        opcionCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCategoriasActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionCategorias);
        opcionCopiasDeSeguridad.setText("Copias de seguridad");
        opcionImportar.setText("Importar");
        opcionImportar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.ALT_MASK));
        opcionImportar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionImportarActionPerformed(evt);
            }
        });
        opcionExportar.setText("Exportar");
        opcionExportar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, ActionEvent.ALT_MASK));
        opcionExportar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionExportarActionPeformed(evt);
            }
        });
        opcionCopiasDeSeguridad.add(opcionImportar);
        opcionCopiasDeSeguridad.add(opcionExportar);
        menuAdministrador.add(opcionCopiasDeSeguridad);
        opcionUsuarios.setText("Usuarios");
        opcionUsuarios.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U, ActionEvent.ALT_MASK));
        opcionUsuarios.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionUsuariosActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionUsuarios);


        barraMenu.add(menuAdministrador);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1409, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                                .addContainerGap())
        );
        colocarCategorias();
        actualizarCuestionarios();
        actualizarPreguntasDialogo();
        tintarTabla();
        pack();
    }// </editor-fold>

    /**
     * Este metodo nos permite cambiar el color de las filas de la tabla
     *
     * @author Fernando
     */
    private void tintarTabla() {
        tablaPreguntas.setForeground(Colores.COLOR_NEGRO);
        int numero = tablaPreguntas.getColumnCount();
        for (int i = 0; i < numero; i++) {
            tablaPreguntas.getColumnModel().getColumn(i).setCellRenderer(new MyCellRenderer());
        }
    }

    private void deleteItemActionPerformed(ActionEvent evt) {
        //se obtiene el elemento seleccionado
        int posicion = tablaPreguntas.getSelectedRow();
        //en caso de no haya seleccionado ningun elemento se corta la ejecucion
        if (posicion == -1) {
            return;
        }
        int idCuestionario = GestionCuestionarios.obtenerId(listaCuestionarios.getSelectedItem().toString());
        int idPregunta = GestionPreguntas.obtenerId((String) modelo.getValueAt(posicion, 0));
        //se intenta borrar la pregunta
        if (GestionCuestionarios.borrarPregunta(idCuestionario, idPregunta)) {
            //en caso de que se borre
            JOptionPane.showMessageDialog(this, Mensajes.PREGUNTA_BORRADA, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
            modelo = GestionCuestionarios.colocarPreguntas(tablaPreguntas, listaCuestionarios.getSelectedItem().toString());
        } else {
            //en caso de que no se borre
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_BORRAR_PREGUNTA, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void opcionUsuariosActionPerformed(ActionEvent evt) {
        VentanaAdministrarUsuarios frame = new VentanaAdministrarUsuarios();
        frame.setVisible(true);
        dispose();
    }

    private void opcionAjustesUsuarioActionPerformed(ActionEvent evt) {
        VentanaAjustesUsuario frame = new VentanaAjustesUsuario();
        frame.setVisible(true);
        dispose();
    }

    private void opcionCerrarSesionActionListener(ActionEvent evt) {
        VentanaLogin frame = new VentanaLogin();
        frame.setVisible(true);
        dispose();
    }

    private void btnInsertarActionPerformed(ActionEvent evt) {
        try {
            //obtenemos los ids del cuestionario y de la pregunta
            int idCuestionario = GestionCuestionarios.obtenerId(listaCuestionarios.getSelectedItem().toString());
            int idPregunta = GestionPreguntas.obtenerId(listaPreguntasDialogo.getSelectedItem().toString());
            //en caso de no haber obtenido bien alguno de los ids
            if (idCuestionario == -1 || idPregunta == -1) {
                JOptionPane.showMessageDialog(null, Mensajes.ERROR_INSERTAR_PREGUNTA, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
                return;
            }
            //nos aseguramos de que el usuario quiere realizar la accion
            if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
                return;
            }
            //intentamos insertar la pregunta
            if (GestionCuestionarios.insertarPregunta(idCuestionario, idPregunta)) {
                //en caso de que se inserte
                JOptionPane.showMessageDialog(null, Mensajes.PREGUNTA_INSERTADA, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
                GestionCuestionarios.colocarPreguntas(tablaPreguntas, (String) listaCuestionarios.getSelectedItem());
                tintarTabla();
            } else {
                //en caso de que no se inserte
                JOptionPane.showMessageDialog(null, Mensajes.ERROR_INSERTAR_PREGUNTA, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            }
            dialogoPreguntas2.dispose();

        } catch (NullPointerException npe) {
            logger.log(Level.SEVERE, Mensajes.ERROR_NULL_POINTER_EXCEPCION, npe);
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_CUESTIONARIO_SELECCIONADO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }


    }

    private void listaCategoriasDialogoItemListener(ItemEvent evt) {
        //vaciamos la lista
        ComboBoxModel<String> model = listaPreguntasDialogo.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            String element = model.getElementAt(i);
            listaPreguntasDialogo.removeItem(element);
        }
        //actualizamos las preguntas del dialogo
        actualizarPreguntasDialogo();
        try {
            listaCuestionarios.setSelectedIndex(0);
        } catch (IllegalArgumentException | NullPointerException e) {
            logger.log(Level.SEVERE, Mensajes.ERROR_NULL_POINTER_EXCEPCION, e);
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_CUESTIONARIO_SELECCIONADO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void listaPreguntasDialogoItemListener(ItemEvent evt) {
        try {
            //obtenemos los datos de la pregunta
            String[] datos = GestionPreguntas.obtenerRespuestas(listaPreguntasDialogo.getSelectedItem().toString());
            if (datos == null) {
                return;
            }
            //los colocamos
            GestionPreguntas.colocarRespuesta(inputRespuestaCorrecta, datos[0]);
            GestionPreguntas.colocarRespuesta(inputRespuestaIncorrecta1, datos[1]);
            GestionPreguntas.colocarRespuesta(inputRespuestaIncorrecta2, datos[2]);
            GestionPreguntas.colocarRespuesta(inputRespuestaIncorrecta3, datos[3]);
        } catch (NullPointerException | ArrayIndexOutOfBoundsException ex) {
            /*
             * En caso de que se seleccione una categoria sin preguntas, ocurrira una expecion
             * porque no hay nada en la lista desplegable, entonces vaciamos las respuestas
             * para que no se queden las respuestas de la pregunta anterior
             */
            inputRespuestaCorrecta.setText("");
            inputRespuestaIncorrecta1.setText("");
            inputRespuestaIncorrecta2.setText("");
            inputRespuestaIncorrecta3.setText("");
        }
    }

    private void listaCuestionariosItemListener(ItemEvent evt) {
        actualizarCuestionarios(); //actualizamos los cuestionarios
        if (listaCuestionarios.getSelectedItem() != null) {//se comprueba que haya algun elemento seleccionado
            modelo = GestionCuestionarios.colocarPreguntas(tablaPreguntas, listaCuestionarios.getSelectedItem().toString());
            colocarDatosCuestionario(listaCuestionarios.getSelectedItem().toString());
        } else {
            int filas = modelo.getRowCount();
            for (int i = 0; i < filas; i++) {
                modelo.removeRow(0);
            }
        }
        tintarTabla();

    }

    private void listaCategoriasItemListener(ItemEvent evt) {
        listaCuestionarios.removeAllItems();
        actualizarCuestionarios();
        try {
            listaCuestionarios.setSelectedIndex(0);
        } catch (IllegalArgumentException ignored) {

        } catch (NullPointerException npe) {
            logger.log(Level.SEVERE, Mensajes.ERROR_NULL_POINTER_EXCEPCION, npe);
        }

    }

    /**
     * Este metodo nos permite colocar los datos de un cuestionario
     * en sus casillas correspondientes
     *
     * @param nombreCuestionario es el nombre del cuestionario del que
     *                           queremos obtener los datos
     */

    private void colocarDatosCuestionario(String nombreCuestionario) {
        String descripcion = GestionCuestionarios.obtenerDescripcion(nombreCuestionario);
        txtNombreCuestionario.setText(nombreCuestionario);
        txtDescripcionCuestionario.setText(descripcion);
    }

    /**
     * Este metodo nos permite colocar las categororias en las listas desplegables tanto
     * de la ventana principal como del dialogo
     *
     * @author Fernando
     */
    private void colocarCategorias() {
        for (String e : GestionCategorias.obtenerCategorias()) {
            listaCategorias.addItem(e);
            listaCategoriasDialogo.addItem(e);
        }
    }

    /**
     * Este metodo actualiza los cuestionarios de la lista desplegable
     *
     * @author Fernando
     */
    private void actualizarCuestionarios() {
        ArrayList<String> cuestionarios = GestionCuestionarios.obtenerCuestionarios(listaCategorias.getSelectedItem().toString());
        for (String s : cuestionarios) {
            if (!contieneElemento(s)) {
                listaCuestionarios.addItem(s);
            }
        }
    }


    /**
     * Este metodo actualiza las preguntas del dialogo que se muestra cuando se
     * pulsa el boton de añadir pregunta
     *
     * @author Fernando
     */
    public void actualizarPreguntasDialogo() {
        listaPreguntasDialogo.removeAllItems();
        ArrayList<String[]> preguntas = GestionPreguntas.obtenerPreguntas(listaCategoriasDialogo.getSelectedItem().toString());
        for (String[] arr : preguntas) {
            listaPreguntasDialogo.addItem(arr[0]);
        }
    }

    /**
     * Este metodo nos permite comprobar si la lista de cuestionarios
     * contiene o no un elemento
     *
     * @param elemento es el elemento que queremos comprobar
     * @return true si existe, false si no existe
     */
    public boolean contieneElemento(String elemento) {
        ComboBoxModel<String> modelo = listaCuestionarios.getModel();
        for (int i = 0; i < modelo.getSize(); i++) {
            if (modelo.getElementAt(i).equals(elemento)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Este metodo actualiza las preguntas del dialogo que se muestra cuando se
     * pulsa el boton de añadir pregunta
     *
     * @author Fernando
     */


    private void tablaPreguntasMouseClicked(java.awt.event.MouseEvent evt) {
        //obtenemos la posicion de la fila que se ha pulsado
        colocarInformacionPregunta();
    }

    /**
     * Este metodo coloca los datos de una pregunta en su casilla correspondiente
     *
     * @author Fernando
     */
    private void colocarInformacionPregunta() {
        int posicion = tablaPreguntas.getSelectedRow();
        if (posicion >= 0) {
            //obtenemos los datos de la pregunta
            String enunciado = (String) modelo.getValueAt(posicion, 0);
            String respuestaCorrecta = (String) modelo.getValueAt(posicion, 1);
            String respuestaIncorrecta1 = (String) modelo.getValueAt(posicion, 2);
            String respuestaIncorrecta2 = (String) modelo.getValueAt(posicion, 3);
            String respuestaIncorrecta3 = (String) modelo.getValueAt(posicion, 4);

            //colocamos el enunciado de la pregunta
            txtEnunciado.setText(enunciado);
            //colocamos las respuestas de la pregunta
            txtRespuestaCorrecta.setText(respuestaCorrecta);
            txtRespuestaIncorrecta1.setText(respuestaIncorrecta1);
            txtRespuestaIncorrecta2.setText(respuestaIncorrecta2);
            txtRespuestaIncorrecta3.setText(respuestaIncorrecta3);
            txtCategoriaPregunta.setText(GestionCategorias.obtenerCategoriaPregunta(enunciado));
        }
    }

    private void opcionExportarActionPeformed(ActionEvent evt) {
        //nos aseguramos de que el usuario quiere realizar la accion
        if (JOptionPane.showConfirmDialog(null, Mensajes.CONFIRMACION_BACKUP, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        //se intenta crear la copia
        if (CopiaDeSeguridad.crearCopia()) {
            //en caso de que se cree
            JOptionPane.showMessageDialog(this, Mensajes.BACKUP_CORRECTO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
        } else {
            //en caso de que no se cree
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_BACKUP, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void opcionImportarActionPerformed(ActionEvent evt) {
        int estado = CopiaDeSeguridad.restaurarCopia();
        if (estado == Codigos.CORRECTO) {
            JOptionPane.showMessageDialog(this, Mensajes.IMPORTACION_CORRECTA, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
        } else if (estado == Codigos.ERROR) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_IMPORTACION, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }

    }

    private void opcionModoJuegoActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaSeleccionarModoJuego ventana = new VentanaSeleccionarModoJuego();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionPreguntasActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaAdministrarPreguntas ventana = new VentanaAdministrarPreguntas();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionCuestionariosActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaAdministrarCuestionarios ventana = new VentanaAdministrarCuestionarios();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionCategoriasActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaAdministrarCategorias ventana = new VentanaAdministrarCategorias();
        ventana.setVisible(true);
        dispose();
    }

    private void btnBorrarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {
        modelo = (DefaultTableModel) tablaPreguntas.getModel();
        int posicion = tablaPreguntas.getSelectedRow();
        //si no hay ninguna preguna seleccionada cortamos la ejecucion del metodo para evitar excepciones
        if (posicion == -1) {
            return;
        }
        //se obtienen lo datos
        int idPregunta = GestionPreguntas.obtenerId((String) modelo.getValueAt(posicion, 0));
        int idCuestionario = GestionCuestionarios.obtenerId((String) listaCuestionarios.getSelectedItem());
        //nos aseguramos de que el usuario quiere realizar la accion
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        //se intenta borrar la pregunta
        if (GestionCuestionarios.borrarPregunta(idCuestionario, idPregunta)) {
            //en caso de que se borre
            JOptionPane.showMessageDialog(this, Mensajes.PREGUNTA_BORRADA, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
            GestionCuestionarios.colocarPreguntas(tablaPreguntas, (String) listaCuestionarios.getSelectedItem());
            tintarTabla();
        } else {
            //en caso de que no se borre
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_BORRAR_PREGUNTA, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnInsertarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {
        dialogoPreguntas2.setSize(1000, 500);
        dialogoPreguntas2.setVisible(true);
    }

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {
        //obtenemos los datos
        String nombre = txtNombreCuestionario.getText();
        String descripcion = txtDescripcionCuestionario.getText();
        int id = GestionCategorias.obtenerIdCategoria(listaCategorias.getSelectedItem().toString());
        // se comprueba que los datos no esten vacios
        if (descripcion.equals("") || nombre.equals("")) {
            return;
        }
        // se comprueba que ya existe un cuestionario con ese nombre
        else if (GestionCuestionarios.existeCuestionario(nombre)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_EXISTE_CUESTIONARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //se comprueba que el usuario esta seguro de querer realizar la accion
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        if (GestionCuestionarios.insertarCuestionario(id, nombre, descripcion) > 0) {
            JOptionPane.showMessageDialog(this, Mensajes.CUESTIONARIO_INSERTADO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
        }
        // se comprueba si se ha insertado en la base de datos o no
        else {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_INSERTAR_CUESTIONARIOS, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
        actualizarCuestionarios();
    }

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            //se obtiene el id del cuestionario que se quiere borrar
            int id = GestionCuestionarios.obtenerId((String) listaCuestionarios.getSelectedItem());
            //nos aseguramos de que el usuario quiere realizar la accion
            if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
                return;
            }
            //se intenta borrar el cuestionario
            if (GestionCuestionarios.borrar(id)) {
                //en caso de que se borre
                JOptionPane.showMessageDialog(this, Mensajes.CUESTIONARIO_BORRADO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
                listaCuestionarios.removeItem(listaCuestionarios.getSelectedItem().toString());
            } else {
                //en caso de que no se borre
                JOptionPane.showMessageDialog(this, Mensajes.ERROR_BORRAR_CUESTIONARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException npe) {
            logger.log(Level.SEVERE, Mensajes.ERROR_NULL_POINTER_EXCEPCION, npe);
        }

    }

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            //obtenemos el id del cuestionario
            int id = GestionCuestionarios.obtenerId(listaCuestionarios.getSelectedItem().toString());
            //obtenemos los datos del cuestionario
            String nombre = txtNombreCuestionario.getText();
            String descripcion = txtDescripcionCuestionario.getText();
            //se comprueba que los datos no esten vacios
            if (nombre.equals("") || descripcion.equals("")) {
                JOptionPane.showMessageDialog(this, Mensajes.RELLENE_TODOS_LOS_CAMPOS, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
                return;
            }
            //nos aseguramos de que el usuario quiere realiar la accion
            if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
                return;
            }
            //se comprueba que no exista ya un cuestionario con ese nombre
            if (GestionCuestionarios.existeCuestionario(nombre) && !nombre.equals(listaCuestionarios.getSelectedItem().toString())) {
                JOptionPane.showMessageDialog(this, Mensajes.ERROR_EXISTE_CUESTIONARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
                return;
            }
            /*
             * Creamos el objeto cuestionario que contiene:
             *      el id del cuestionario que vamos a modificar
             *      el nombre nuevo del cuestionario
             *      la nueva descripcion del cuestionario
             */
            Cuestionario c = new Cuestionario(id, nombre, descripcion);
            //realizamos la modificacion y mostramos el mensaje correspondiente
            if (GestionCuestionarios.modificar(c)) {
                JOptionPane.showMessageDialog(this, Mensajes.CUESIONARIO_MODIFICADO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, Mensajes.ERROR_MODIFICAR_CUESIONARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            }
            //obtenemos la posicion del cuestionario seleccionado
            int posicionCuestionario = listaCuestionarios.getSelectedIndex();
            listaCuestionarios.removeAllItems(); // vaciamos la lista
            actualizarCuestionarios(); //la volvemos a llenar
        /*seleccionamos el elemento que se encuentra en la misma posicion que el que acabamos de modificar,
          de esta manera se vera reflejada la modificacion en la lista y el usuario no notara el cambio
         */
            listaCuestionarios.setSelectedIndex(posicionCuestionario);
        } catch (NullPointerException npe) {
            logger.log(Level.SEVERE, Mensajes.ERROR_NULL_POINTER_EXCEPCION, npe);
        }
    }

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {
        colocarInformacionPregunta();
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {
        dialogoPreguntas2.dispose();
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel JpanelPreguntas;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBorrarPregunta;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnInsertarPregunta;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;

    private javax.swing.JDialog dialogoPreguntas2;
    private javax.swing.JTextField inputRespuestaCorrecta;
    private javax.swing.JTextField inputRespuestaIncorrecta1;
    private javax.swing.JTextField inputRespuestaIncorrecta2;
    private javax.swing.JTextField inputRespuestaIncorrecta3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPreguntas;
    private javax.swing.JTextField txtNombreCuestionario;
    private javax.swing.JTextField txtDescripcionCuestionario;
    private javax.swing.JPanel jpanelTextos;
    private javax.swing.JComboBox<String> listaCategorias;
    private javax.swing.JComboBox<String> listaCategoriasDialogo;
    private javax.swing.JComboBox<String> listaCuestionarios;
    private javax.swing.JComboBox<String> listaPreguntasDialogo;
    private javax.swing.JMenu menuAdministrador;
    private javax.swing.JMenu menuUsuario;
    private javax.swing.JMenuItem opcionCategorias;
    private javax.swing.JMenuItem opcionCuestionarios;
    private javax.swing.JMenu opcionCopiasDeSeguridad;
    private javax.swing.JMenuItem opcionExportar;
    private javax.swing.JMenuItem opcionImportar;
    private javax.swing.JMenuItem opcionUsuarios;

    private javax.swing.JMenuItem opcionModoJuego;
    private javax.swing.JMenuItem opcionPreguntas;
    private javax.swing.JMenuItem opcionCerrarSesion;
    private javax.swing.JMenuItem opcionAjustesUsuario;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelDialogoFila5;
    private javax.swing.JPanel panelDialogoFila6;
    private javax.swing.JPanel panelDialogoFila7;
    private javax.swing.JPanel panelDialogoFila8;
    private javax.swing.JPanel panelFila1;
    private javax.swing.JPanel panelFila2;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelPrincipal3;
    private javax.swing.JTextField txtCategoriaPregunta;
    private javax.swing.JTextField txtEnunciado;
    private javax.swing.JTextField txtRespuestaCorrecta;
    private javax.swing.JTextField txtRespuestaIncorrecta1;
    private javax.swing.JTextField txtRespuestaIncorrecta2;
    private javax.swing.JTextField txtRespuestaIncorrecta3;
    // End of variables declaration
}
