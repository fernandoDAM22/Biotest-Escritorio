/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.administrador;

import controller.baseDeDatos.Cifrado;
import controller.baseDeDatos.CopiaDeSeguridad;
import controller.tools.*;
import controller.usuario.Codigos;
import controller.usuario.ConfiguracionUsuario;
import controller.usuario.GestionUsuarios;
import controller.usuario.Registro;
import model.Usuario;
import view.acceso.VentanaLogin;
import view.juego.VentanaSeleccionarModoJuego;
import view.usuario.VentanaAjustesUsuario;
import view.usuario.VentanaMisPartidas;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.ImageObserver;
import java.util.ArrayList;

import static controller.usuario.Codigos.*;

/**
 * Esta clase pinta la interfaz que permite al administrador modificar sus datos
 * de usuario, sus funciones son:
 * <ul>
 *     <li>Crear usuario</li>
 *     <li>Moficiar Usuarios</li>
 *     <li>Borrar usuarios</li>
 * </ul>
 * @author Fernando
 */
public class VentanaAdministrarUsuarios extends javax.swing.JFrame {
    DefaultTableModel modelo;

    /**
     * Creates new form VentanaAdministrarUsuarios
     */
    public VentanaAdministrarUsuarios() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        grupoBotones = new javax.swing.ButtonGroup();
        panelPrincipal = new javax.swing.JPanel();
        panelTitulo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelCentral = new javax.swing.JPanel();
        panelOperaciones = new javax.swing.JPanel();
        btnInsertar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        panelDatos = new javax.swing.JPanel();
        panelDatosUsuarios = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        opcionMisPartidas = new javax.swing.JMenuItem();
        labelTextoPassword = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        radioButtonUser = new javax.swing.JRadioButton();
        radioButtonAdmin = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        barraMenu = new javax.swing.JMenuBar();
        menuUsuario = new javax.swing.JMenu();
        opcionModoJuego = new javax.swing.JMenuItem();
        opcionAjustesUsuario = new javax.swing.JMenuItem();
        opcionCerrarSesion = new javax.swing.JMenuItem();
        menuAdministrador = new javax.swing.JMenu();
        opcionPreguntas = new javax.swing.JMenuItem();
        opcionCuestionarios = new javax.swing.JMenuItem();
        opcionCategorias = new javax.swing.JMenuItem();
        opcionCopiasDeSeguridad = new javax.swing.JMenu();
        opcionImportar = new javax.swing.JMenuItem();
        opcionExportar = new javax.swing.JMenuItem();
        opcionUsuarios = new javax.swing.JMenuItem();

        txtNombre.addFocusListener(new EventoFoco());
        txtPassword.addFocusListener(new EventoFoco());
        txtTelefono.addFocusListener(new EventoFoco());
        txtEmail.addFocusListener(new EventoFoco());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setText("Usuarios");
        panelTitulo.add(jLabel1);

        panelPrincipal.add(panelTitulo, java.awt.BorderLayout.PAGE_START);

        panelCentral.setLayout(new java.awt.BorderLayout());

        panelOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones"));
        panelOperaciones.setPreferredSize(new java.awt.Dimension(200, 626));

        btnInsertar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnInsertar.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnInsertar.setForeground(Colores.COLOR_NEGRO);
        btnInsertar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnInsertar.setText("Insertar");
        btnInsertar.setPreferredSize(new java.awt.Dimension(150, 50));
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnBorrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBorrar.setText("Borrar");
        btnBorrar.setForeground(Colores.COLOR_NEGRO);
        btnBorrar.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnBorrar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnBorrar.setPreferredSize(new java.awt.Dimension(150, 50));
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setForeground(Colores.COLOR_NEGRO);
        btnModificar.setBackground(Colores.COLOR_AMARILLO_BOTONES);
        btnModificar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new java.awt.Dimension(150, 50));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOperacionesLayout = new javax.swing.GroupLayout(panelOperaciones);
        panelOperaciones.setLayout(panelOperacionesLayout);
        panelOperacionesLayout.setHorizontalGroup(
                panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelOperacionesLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(18, Short.MAX_VALUE))
        );
        panelOperacionesLayout.setVerticalGroup(
                panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelOperacionesLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(292, Short.MAX_VALUE))
        );

        panelCentral.add(panelOperaciones, java.awt.BorderLayout.LINE_END);

        panelDatos.setLayout(new java.awt.BorderLayout());

        panelDatosUsuarios.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));
        panelDatosUsuarios.setPreferredSize(new java.awt.Dimension(1000, 300));

        jLabel2.setText("Nombre");

        jLabel3.setText("Email");

        jLabel4.setText("Telefono");

        jLabel5.setText("Tipo");

        labelTextoPassword.setText("Contrase√±a");
        labelTextoPassword.setCursor(new Cursor(Cursor.HAND_CURSOR));
        labelTextoPassword.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                super.mouseClicked(evt);
                labelTextoPasswordMouseClicked(evt);
            }
        });

        radioButtonUser.setText("Usuario");
        grupoBotones.add(radioButtonUser);

        radioButtonAdmin.setText("Administrador");
        grupoBotones.add(radioButtonAdmin);

        javax.swing.GroupLayout panelDatosUsuariosLayout = new javax.swing.GroupLayout(panelDatosUsuarios);
        panelDatosUsuarios.setLayout(panelDatosUsuariosLayout);
        panelDatosUsuariosLayout.setHorizontalGroup(
                panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelDatosUsuariosLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                                        .addComponent(labelTextoPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(panelDatosUsuariosLayout.createSequentialGroup()
                                                .addComponent(radioButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(radioButtonAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(45, Short.MAX_VALUE))
        );
        panelDatosUsuariosLayout.setVerticalGroup(
                panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelDatosUsuariosLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(radioButtonUser)
                                        .addComponent(radioButtonAdmin))
                                .addGap(26, 26, 26)
                                .addGroup(panelDatosUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelTextoPassword)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47))
        );

        panelDatos.add(panelDatosUsuarios, java.awt.BorderLayout.PAGE_END);

        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Nombre", "Email", "Telefono", "Tipo"
                }

        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        JPopupMenu popup = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem(Mensajes.MENSAJE_BORRAR);deleteItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });

        popup.add(deleteItem);

        tablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaUsuariosMouseClicked(evt);
            }
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    popup.show(tablaUsuarios, e.getX(), e.getY());
                }
            }
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    popup.show(tablaUsuarios, e.getX(), e.getY());
                }
            }
        });
        tablaUsuarios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaUsuariosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaUsuarios);

        panelDatos.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelCentral.add(panelDatos, java.awt.BorderLayout.CENTER);

        panelPrincipal.add(panelCentral, java.awt.BorderLayout.CENTER);

        menuUsuario.setText("Usuario");

        opcionModoJuego.setText("Seleccionar Modo de juego");
        opcionModoJuego.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.ALT_MASK));
        opcionModoJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionModoJuegoActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionModoJuego);

        opcionAjustesUsuario.setText("Ajustes de usuario");
        opcionAjustesUsuario.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, ActionEvent.ALT_MASK));
        opcionAjustesUsuario.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionAjustesUsuarioActionListener(evt);
            }
        });

        menuUsuario.add(opcionAjustesUsuario);

        opcionCerrarSesion.setText("Cerrar Sesion");
        opcionCerrarSesion.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.ALT_MASK));
        opcionCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCerrarSesionActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionCerrarSesion);

        opcionMisPartidas.setText("Mis partidas");
        opcionMisPartidas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.ALT_MASK));
        opcionMisPartidas.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionMisPartidasActionPerformed(evt);
            }
        });
        menuUsuario.add(opcionMisPartidas);
        barraMenu.add(menuUsuario);

        menuAdministrador.setText("Administrador");

        opcionPreguntas.setText("Preguntas");
        opcionPreguntas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.ALT_MASK));
        opcionPreguntas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionPreguntasActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionPreguntas);

        opcionCuestionarios.setText("Cuestionarios");
        opcionCuestionarios.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.ALT_MASK));
        opcionCuestionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCuestionariosActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionCuestionarios);


        opcionCategorias.setText("Categorias");
        opcionCategorias.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.ALT_MASK));
        opcionCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCategoriasActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionCategorias);

        opcionCopiasDeSeguridad.setText("Copias de seguridad");

        opcionImportar.setText("Importar");
        opcionImportar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.ALT_MASK));
        opcionImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionImportarActionPerformed(evt);
            }
        });
        opcionCopiasDeSeguridad.add(opcionImportar);
        opcionExportar.setText("Exportar");
        opcionExportar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, ActionEvent.ALT_MASK));
        opcionExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionExportarActionPerformed(evt);
            }
        });
        opcionCopiasDeSeguridad.add(opcionExportar);

        menuAdministrador.add(opcionCopiasDeSeguridad);
        opcionUsuarios.setText("Usuarios");
        opcionUsuarios.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U, ActionEvent.ALT_MASK));
        opcionUsuarios.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                opcionUsuariosActionPerformed(evt);
            }
        });
        menuAdministrador.add(opcionUsuarios);


        barraMenu.add(menuAdministrador);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
        txtPassword.setEnabled(false);
        modelo = (DefaultTableModel) tablaUsuarios.getModel();
        cargarTabla();
        tintarTabla();
        pack();
    }// </editor-fold>

    private void opcionMisPartidasActionPerformed(ActionEvent evt) {
        VentanaMisPartidas frame = new VentanaMisPartidas();
        frame.setVisible(true);
        dispose();
    }

    /**
     * Este metodo nos permite cambiar el color de las filas de la tabla
     *
     * @author Fernando
     */
    private void tintarTabla() {
        tablaUsuarios.setForeground(Colores.COLOR_NEGRO);
        int numero = tablaUsuarios.getColumnCount();
        for (int i = 0; i < numero; i++) {
            tablaUsuarios.getColumnModel().getColumn(i).setCellRenderer(new MyCellRenderer());
        }
    }

    private void deleteItemActionPerformed(ActionEvent evt) {
        int posicion = tablaUsuarios.getSelectedRow();
        if(posicion == -1){
            return;
        }
        if(comprobacionUsuario((String) modelo.getValueAt(posicion,0))){
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_MISMO_USUARIO,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        if(GestionUsuarios.borrarUsuario((String) modelo.getValueAt(posicion,0))){
            JOptionPane.showMessageDialog(this,Mensajes.USUARIO_BORRADO, Mensajes.CORRECTO,JOptionPane.INFORMATION_MESSAGE);
            cargarTabla();
        }else{
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_BORRAR_USUARIO,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
        }
    }

    private void opcionAjustesUsuarioActionListener(ActionEvent evt) {
        VentanaAjustesUsuario frame = new VentanaAjustesUsuario();
        frame.setVisible(true);
        dispose();
    }

    private void opcionUsuariosActionPerformed(ActionEvent evt) {
        VentanaAdministrarUsuarios frame = new VentanaAdministrarUsuarios();
        frame.setVisible(true);
        dispose();
    }

    private void cargarTabla() {
        vaciarTabla();
        ArrayList<Usuario> usuarios = GestionUsuarios.obtenerUsuarios();
        for (Usuario user : usuarios) {
            modelo.addRow(user.convertir());
        }
    }

    private void vaciarTabla() {
        int filas = modelo.getRowCount();
        for (int i = 0; i < filas; i++) {
            modelo.removeRow(0);
        }
    }

    private void colocarDatosUsuario() {
        int posicion = tablaUsuarios.getSelectedRow();
        if(posicion == -1){
            return;
        }
        txtNombre.setText((String) modelo.getValueAt(posicion, 0));
        txtEmail.setText((String) modelo.getValueAt(posicion, 1));
        txtTelefono.setText((String) modelo.getValueAt(posicion, 2));
        String tipo = (String) modelo.getValueAt(posicion, 3);
        if (tipo.equals("admin")) {
            radioButtonAdmin.setSelected(true);
        } else {
            radioButtonUser.setSelected(true);
        }
    }
    /**
     * Este metodo ejecuta las instrucciones necesarias para modificar todos los datos
     * de un usuario, incluyendo su contrase√±a
     * @author Fernando
     */
    private void modificarUsuarioCompleto() {
        //recogemos los datos del usuario
        String nombre = txtNombre.getText();
        String email = txtEmail.getText();
        String telefono = txtTelefono.getText();
        String password = txtPassword.getText();
        String tipo = "";
        //en funcion del JRadioButton Seleccionado el tipo de usuario sera uno o otro
        if (radioButtonUser.isSelected()) {
            tipo = "user";
        } else if (radioButtonAdmin.isSelected()) {
            tipo = "admin";
        }
        //comprobamos que los campos no esten vacios
        if (nombre.equals("") || email.equals("") || telefono.equals("") || password.equals("") || tipo.equals("")) {
            JOptionPane.showMessageDialog(this, Mensajes.RELLENE_TODOS_LOS_CAMPOS, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el nombre cumple con los requisitos
        if (!ComprobarDatos.comprobarNombre(nombre)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_USERNAME, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*
            comprobamos que no exista un usuario con ese nombre ya, necesitamos comprobar
            que ya exista ese nombre y que ademas sea distinto al nombre que se nos muestra
            en la tabla, esto sucede porque si solo comprobamos si existe o no, cada vez que pulsemos
            el boton de modificar deberemos modificar tambien el nombre o nos dara error, de esta manera, con esta
            comprobacion podemos modificar los demas datos sin necesidad de cambiar el nombre

            Por otra parte es necesario el try catch para evitar la excepcion que ocurre si se pulsa
            el boton de modificar y no se tiene seleccionado ningun usuario en la tabla
         */
        try {
            if (ComprobarDatos.existeUsuario(nombre) > 0 && !nombre.equals(modelo.getValueAt(tablaUsuarios.getSelectedRow(), 0))) {
                JOptionPane.showMessageDialog(this, Mensajes.ERROR_EXISTE_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (ArrayIndexOutOfBoundsException aioe) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_SELECCION_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el email cumple con los requisitos
        if (!ComprobarDatos.comprobarCorreo(email)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_EMAIL, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el telefono cumple con los requisitos
        if (!ComprobarDatos.comprobarTelefono(telefono)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_TELEFONO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que la contrase√±a cumple con los requisitos
        if (!ComprobarDatos.comprobarFormatoPassword(password)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_FORMATO_PASSWORD, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*
        Obtenemos el nombre de usuario, es necesario el try catch porque si no hay
        ningun usuario seleccionado en la tabla saltara la excepcion
         */
        String nombreUsuario;
        try {
            nombreUsuario = (String) modelo.getValueAt(tablaUsuarios.getSelectedRow(), 0);
        } catch (ArrayIndexOutOfBoundsException aioe) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_SELECCION_USUARIO);
            return;
        }
        //nos aseguramos de que el usuario confirma la insercion del usuario
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        Usuario usuario = new Usuario(nombre, Cifrado.SHA256(password), email, telefono, tipo);

        if (GestionUsuarios.modificarUsuarioCompleto(usuario, nombreUsuario)) {
            JOptionPane.showMessageDialog(this, Mensajes.USUARIO_MODIFICADO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
            cargarTabla();
            vaciarCajas();
        } else {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_MODIFICAR_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Este metodo ejecuta las instrucciones necesarias para modificar los datos
     * de un usuario a excepcion de su contrase√±a
     * @author Fernando
     */
    private void modificarUsuarioSinPassword() {
        //recogemos los datos del usuario
        String nombre = txtNombre.getText();
        String email = txtEmail.getText();
        String telefono = txtTelefono.getText();
        String tipo = "";
        //en funcion del JRadioButton Seleccionado el tipo de usuario sera uno o otro
        if (radioButtonUser.isSelected()) {
            tipo = "user";
        } else if (radioButtonAdmin.isSelected()) {
            tipo = "admin";
        }
        //comprobamos que los campos no esten vacios
        if (nombre.equals("") || email.equals("") || telefono.equals("") || tipo.equals("")) {
            JOptionPane.showMessageDialog(this, Mensajes.RELLENE_TODOS_LOS_CAMPOS, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el nombre cumple con los requisitos
        if (!ComprobarDatos.comprobarNombre(nombre)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_USERNAME, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
          /*
            comprobamos que no exista un usuario con ese nombre ya, necesitamos comprobar
            que ya exista ese nombre y que ademas sea distinto al nombre que se nos muestra
            en la tabla, esto sucede porque si solo comprobamos si existe o no, cada vez que pulsemos
            el boton de modificar deberemos modificar tambien el nombre o nos dara error, de esta manera, con esta
            comprobacion podemos modificar los demas datos sin necesidad de cambiar el nombre

            Por otra parte es necesario el try catch para evitar la excepcion que ocurre si se pulsa
            el boton de modificar y no se tiene seleccionado ningun usuario en la tabla
            */
        try {
            if (ComprobarDatos.existeUsuario(nombre) > 0 && !nombre.equals(modelo.getValueAt(tablaUsuarios.getSelectedRow(), 0))) {
                JOptionPane.showMessageDialog(this, Mensajes.ERROR_EXISTE_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (ArrayIndexOutOfBoundsException aioe) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_SELECCION_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que no exista un usuario con ese nombre ya

        //comprobamos que el email cumple con los requisitos
        if (!ComprobarDatos.comprobarCorreo(email)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_EMAIL, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el telefono cumple con los requisitos
        if (!ComprobarDatos.comprobarTelefono(telefono)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_TELEFONO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*
        Obtenemos el nombre de usuario, es necesario el try catch porque si no hay
        ningun usuario seleccionado en la tabla saltara la excepcion
        */
        String nombreUsuario;
        try {
            nombreUsuario = (String) modelo.getValueAt(tablaUsuarios.getSelectedRow(), 0);
        } catch (ArrayIndexOutOfBoundsException aioe) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_SELECCION_USUARIO);
            return;
        }
        //nos aseguramos de que el usuario confirma la insercion del usuario
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        Usuario usuario = new Usuario(nombre, email, telefono, tipo);
        if (GestionUsuarios.modificarUsuarioSinPassword(usuario, nombreUsuario)) {
            JOptionPane.showMessageDialog(this, Mensajes.USUARIO_MODIFICADO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
            cargarTabla();
            vaciarCajas();
        } else {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_INSERTAR_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Este metodo permite vaciar los campos de texto
     * @author Fernando
     */
    private void vaciarCajas() {
        txtEmail.setText("");
        txtNombre.setText("");
        txtPassword.setText("");
        txtTelefono.setText("");
    }


    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {
        //recogemos los datos del usuario
        String nombre = txtNombre.getText();
        String email = txtEmail.getText();
        String telefono = txtTelefono.getText();
        String password = txtPassword.getText();
        String tipo = "";
        //en funcion del JRadioButton Seleccionado el tipo de usuario sera uno o otro
        if (radioButtonUser.isSelected()) {
            tipo = "user";
        } else if (radioButtonAdmin.isSelected()) {
            tipo = "admin";
        }
        //comprobamos que los campos no esten vacios
        if (nombre.equals("") || email.equals("") || telefono.equals("") || password.equals("") || tipo.equals("")) {
            JOptionPane.showMessageDialog(this, Mensajes.RELLENE_TODOS_LOS_CAMPOS, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el nombre cumple con los requisitos
        if (!ComprobarDatos.comprobarNombre(nombre)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_USERNAME, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que no exista un usuario con ese nombre ya
        if (ComprobarDatos.existeUsuario(nombre) > 0) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_EXISTE_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el email cumple con los requisitos
        if (!ComprobarDatos.comprobarCorreo(email)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_EMAIL, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que el telefono cumple con los requisitos
        if (!ComprobarDatos.comprobarTelefono(telefono)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_TELEFONO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //comprobamos que la contrase√±a cumple con los requisitos
        if (!ComprobarDatos.comprobarFormatoPassword(password)) {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_FORMATO_PASSWORD, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        //nos aseguramos de que el usuario confirma la insercion del usuario
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        //procedemos a la insercion del usuarios
        Usuario usuario = new Usuario(nombre, Cifrado.SHA256(password), email, telefono, tipo);
        if (Registro.registrarUsuario(usuario)) {
            JOptionPane.showMessageDialog(this, Mensajes.USUARIO_REGISTRADO, Mensajes.CORRECTO, JOptionPane.INFORMATION_MESSAGE);
            cargarTabla();
            vaciarCajas();
        } else {
            JOptionPane.showMessageDialog(this, Mensajes.ERROR_INSERTAR_USUARIO, Mensajes.ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {
        /*
        Para modificar los datos, podemos tener dos modificaciones posibles, una en la que
        la contrase√±a se modifique y otra en la que no, esto ocurre porque si solo tuvieramos una modificacion
        posible, el administrador deberia rellenar todos los campos, incluida la contrase√±a aunque no la quiera
        modificar, y la contrase√±a no se muestra en la tabla ni se puede ver en la base de datos puesto que esta cifrada,
        en este caso si el campo para introducir la contrase√±a no esta activado se realiza una modificacion del usuario sin
        modificar su contrase√±a, de lo contrario si se activa el campo para introducir la contrase√±a si seria necesario rellenarlo
        y si se modificaria la contrase√±a del usuario
         */
        if (txtPassword.isEnabled()) {
            modificarUsuarioCompleto();
        } else {
            modificarUsuarioSinPassword();
        }

    }

    /**
     * Este metodo activa o desactiva el campo para introducir la contrase√±a
     *
     * @param evt es la etiqueta sobre la que se pulsa
     */
    private void labelTextoPasswordMouseClicked(MouseEvent evt) {
        txtPassword.setEnabled(!txtPassword.isEnabled());
    }


    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {
        int posicion = tablaUsuarios.getSelectedRow();
        if(posicion == -1){
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_SELECCION_USUARIO,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(comprobacionUsuario((String) modelo.getValueAt(posicion,0))){
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_MISMO_USUARIO,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (JOptionPane.showConfirmDialog(null, Mensajes.MENSAJE_CONFIRMACION, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        if(GestionUsuarios.borrarUsuario((String) modelo.getValueAt(posicion,0))){
            JOptionPane.showMessageDialog(this, Mensajes.USUARIO_BORRADO, Mensajes.CORRECTO,JOptionPane.INFORMATION_MESSAGE);
            cargarTabla();
            vaciarCajas();
        }else{
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_BORRAR_USUARIO,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Este metodo permite comprobar si el usuario que se intenta borrar
     * es el mismo que el usuario registrado
     * @param usuario es el usuario que queremos comprobar
     * @return true si es el mismo, false si no
     */
    private boolean comprobacionUsuario(String usuario) {
        int posicion = tablaUsuarios.getSelectedRow();
        return usuario.equals(ConfiguracionUsuario.getNombreUsuario());
    }

    private void tablaUsuariosKeyReleased(java.awt.event.KeyEvent evt) {
        colocarDatosUsuario();
    }

    private void tablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {
        colocarDatosUsuario();
    }

    private void opcionModoJuegoActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaSeleccionarModoJuego ventana = new VentanaSeleccionarModoJuego();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaLogin frame = new VentanaLogin();
        frame.setVisible(true);
        dispose();
    }

    private void opcionPreguntasActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaAdministrarPreguntas ventana = new VentanaAdministrarPreguntas();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionCuestionariosActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaAdministrarCuestionarios ventana = new VentanaAdministrarCuestionarios();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionCategoriasActionPerformed(java.awt.event.ActionEvent evt) {
        VentanaAdministrarCategorias ventana = new VentanaAdministrarCategorias();
        ventana.setVisible(true);
        dispose();
    }

    private void opcionImportarActionPerformed(java.awt.event.ActionEvent evt) {
        int estado = CopiaDeSeguridad.restaurarCopia();
        if(estado == CORRECTO){
            JOptionPane.showMessageDialog(this,Mensajes.IMPORTACION_CORRECTA, Mensajes.CORRECTO,JOptionPane.INFORMATION_MESSAGE);
        }else if(estado == Codigos.ERROR){
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_IMPORTACION,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
        }
    }

    private void opcionExportarActionPerformed(java.awt.event.ActionEvent evt) {
        if(JOptionPane.showConfirmDialog(null, Mensajes.CONFIRMACION_BACKUP, Mensajes.TITULO_CONFIRMACION, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0){
            return;
        }
        if(CopiaDeSeguridad.crearCopia()){
            JOptionPane.showMessageDialog(this,Mensajes.BACKUP_CORRECTO, Mensajes.CORRECTO,JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this,Mensajes.ERROR_BACKUP,Mensajes.ERROR,JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnModificar;
    private javax.swing.ButtonGroup grupoBotones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel labelTextoPassword;
    private javax.swing.JMenuItem opcionMisPartidas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAdministrador;
    private javax.swing.JMenu menuUsuario;
    private javax.swing.JMenuItem opcionAjustesUsuario;
    private javax.swing.JMenuItem opcionCategorias;
    private javax.swing.JMenuItem opcionCerrarSesion;
    private javax.swing.JMenu opcionCopiasDeSeguridad;
    private javax.swing.JMenuItem opcionCuestionarios;
    private javax.swing.JMenuItem opcionExportar;
    private javax.swing.JMenuItem opcionImportar;
    private javax.swing.JMenuItem opcionUsuarios;
    private javax.swing.JMenuItem opcionModoJuego;
    private javax.swing.JMenuItem opcionPreguntas;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelDatos;
    private javax.swing.JPanel panelDatosUsuarios;
    private javax.swing.JPanel panelOperaciones;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelTitulo;
    private javax.swing.JRadioButton radioButtonAdmin;
    private javax.swing.JRadioButton radioButtonUser;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration
}
